<?php

namespace App\Console\Commands;

use App\Models\Campaign;
use App\Models\CampaignBacklinkStash;
use App\Classes\GoogleAPI;
use Illuminate\Console\Command;

class CampaignGoogleMalwareCmd extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'campaign:google_malware {id : The ID of campaign}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Launches Campaign backlinks malware check through Google API.';

    /**
     * Create a new command instance.
     *
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {
        /** @var Campaign $campaign*/
        $campaign = Campaign::find($this->argument('id'));

        if(!$campaign) {
            echo 'Campaign not found.';
            return;
        }

        /*
         * TIPS: A domain can contain safe and unsefe pages. so we verify every unique backlink.
         * */

        $backlinks = $bad_urls = [];

        foreach(CampaignBacklinkStash::where('campaign_id', $campaign->id)->limit(100000)->pluck('SourceURL') as $url) {
            $changed = false;
            $arr = explode('?', $url, 2);
            if(isset($arr[1])) {
                parse_str($arr[1], $output);
                foreach($output as $key => $item) {
                    if(strpos($key, 'utm_') === 0 || strpos($key, 'reply') !== false || strpos($key, 'login') === 0 || strpos($key, 'comment') === 0) { //bbp_reply_to ?replytocom=9 commentid=
                        $changed = true;
                        unset($output[$key]);
                    }
                }
                if($changed)
                    $url = $arr[0] . '?'. http_build_query($output);
            }

            $backlinks[$url] = 1;
        }

        if(!$backlinks) {
            echo 'No Backlinks found.';
            return;
        }


        //urls to test
        /*
         * http://www.allturk.ru/dir/zhenskaja_odezhda/108
         * http://www.allturk.ru/
         * */

        $bad_urls = (new GoogleAPI([
            'campaign_id'   => $campaign->id,
            'method'        => 'safebrowsing',
            'urls'           => array_keys($backlinks)
        ]))->safebrowsing();

        // @TODO update db by ids not SourceURLs
        // update db.
        foreach(array_chunk($bad_urls, 500) as $chunk)
            CampaignBacklinkStash::where('campaign_id', $campaign->id)
                ->whereIn('SourceURL', $chunk)
                ->update(['malware' => 1]);

        // google malware is done, finish stage
        if($campaign->stage != 10) {
            $campaign->stage_status = 3;
            $campaign->save();
            dispatch(new \App\Jobs\Engagedcount($campaign->id));
        }else {
            // send a req to urlanalyzer. that we are ready to get backlinks.
            (new \App\Classes\UrlanalyzerAPINEW([
                'campaign_id' => $campaign->id,
                'method' => 'status'
            ]))->status();
        }

        echo 1;
    }
}
